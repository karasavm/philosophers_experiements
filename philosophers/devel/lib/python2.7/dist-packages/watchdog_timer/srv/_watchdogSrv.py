"""autogenerated by genpy from watchdog_timer/watchdogSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class watchdogSrvRequest(genpy.Message):
  _md5sum = "df769c8ebbf1228924a2ae49d71f0000"
  _type = "watchdog_timer/watchdogSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string watchdogName
uint8 type
uint8 TYPE_STOP = 0
uint8 TYPE_START = 1
duration timeoutDuration


"""
  # Pseudo-constants
  TYPE_STOP = 0
  TYPE_START = 1

  __slots__ = ['watchdogName','type','timeoutDuration']
  _slot_types = ['string','uint8','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       watchdogName,type,timeoutDuration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(watchdogSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.watchdogName is None:
        self.watchdogName = ''
      if self.type is None:
        self.type = 0
      if self.timeoutDuration is None:
        self.timeoutDuration = genpy.Duration()
    else:
      self.watchdogName = ''
      self.type = 0
      self.timeoutDuration = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.watchdogName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2i.pack(_x.type, _x.timeoutDuration.secs, _x.timeoutDuration.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timeoutDuration is None:
        self.timeoutDuration = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.watchdogName = str[start:end].decode('utf-8')
      else:
        self.watchdogName = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.type, _x.timeoutDuration.secs, _x.timeoutDuration.nsecs,) = _struct_B2i.unpack(str[start:end])
      self.timeoutDuration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.watchdogName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2i.pack(_x.type, _x.timeoutDuration.secs, _x.timeoutDuration.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timeoutDuration is None:
        self.timeoutDuration = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.watchdogName = str[start:end].decode('utf-8')
      else:
        self.watchdogName = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.type, _x.timeoutDuration.secs, _x.timeoutDuration.nsecs,) = _struct_B2i.unpack(str[start:end])
      self.timeoutDuration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2i = struct.Struct("<B2i")
"""autogenerated by genpy from watchdog_timer/watchdogSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class watchdogSrvResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "watchdog_timer/watchdogSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(watchdogSrvResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class watchdogSrv(object):
  _type          = 'watchdog_timer/watchdogSrv'
  _md5sum = 'df769c8ebbf1228924a2ae49d71f0000'
  _request_class  = watchdogSrvRequest
  _response_class = watchdogSrvResponse

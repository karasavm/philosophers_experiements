#define PHILOSOPHER_H
#include "ros/ros.h"
#include "remote_mutex/RemoteMutex.h"
#include "state_manager/StateClient.h"
#include "watchdog_timer/Watchdog.h"
#include "state_manager_communications/robotModeMsg.h"
#include <dining_philosopher_communications/hungerMsg.h>
#include <stdlib.h>
#include <tr1/random>
#include "remote_counter/countingSrv.h"
#include "dining_philosopher/Philosopher.h"
/**
 * A single dinning philosopher. Each Philosopher has a unique id
 * as well as the two spoons that she handles.
 */

int NORMAL_DURATION;   // ITS THE DURATION THAT THIS PHILOSOPHER WILL BE ACT AS NORMAL  //////////////////////////////////////////////////
class Philosopher : StateClient {
  public:
    /**
     * Constructor
     * @param id the id of the Philosopher.
     * @param fork_counter the id of the fork repository
     */
    Philosopher(int id, std::string fork_counter, int64_t num_forks);
  
    /**
     * Start the Philosopher!
     */
    virtual void start();
  protected:
    /**
     * We are updated that the transition has been complete.
     */
    void completeTransition();
    
    virtual void nowEating(){};
    
    /**
     * Get notified to start the transition. StateClient.
     */
    void startTransition(const state_manager_communications::robotModeMsg &newState);
    
    /**
     * External Philosopher States.
     */
    static const int STATE_NOTHING = 0;
    static const int STATE_ACTIVE = 1;
    
    /**
     * Internal Philosopher States.
     * Waiting implies for a spoon.
     */
    static const int ISTATE_NOTHING = 0;
    static const int ISTATE_EATING = 1;
    static const int ISTATE_WAITING = 2;
    static const int ISTATE_THINKING = 3;
    
    double STARVATION_LEVEL;
    
    /**
     * Tries to get the forks (the philosopher wants).
     * Returns false when it fails.
     */
    bool getForks();
    
    void giveForks();
    
    /**
     * The method to periodically post the hungerMsg which contains 
     * the hungerLevel of each philosopher
     */
    void postMsg(const ros::TimerEvent& event);
    
    // The hunger level of each philosopher
    float hunger_level_;
    int faulty_;                                                                      ////////////////////////////////////////
    std::time_t start_time_;                         ////////////////////////////////////
    
    // An async spinner to help with sending/receiving calls.
    ros::AsyncSpinner spinner_;
    
    // Perform operations as in state active (think, eat)
    virtual void stateActive();
    
    virtual void recalculateHunger();
  protected:    
    /**
	 * The Client to the mutex serivce.
	 */
    ros::ServiceClient client_;
     
    // Incremnt the counter by the given value. 
    // Returns false if operation fails. (i.e. not that many forks
    // are available).
    bool forkCounter(int64_t count);
    
    // Think & Eat. Operations performed in active state.
    virtual void think();
    virtual void eat();
    
    // The Philosopher's id
    int id_; 
    
    // The number of forks needed.
    const int64_t num_forks_;
    
    // True if the system should be transitioning.
    // Useful for notifing processes
    bool transitioning_;
    
    /**
     * The maximum eating & thinking time, set by ROS parameters.
     * When a philisopher wants to eat, she picks a random number
     * of seconds betwee 0 and max and thinks/eats for that time.
     */
    int max_eating_time_;
    int max_thinking_time_;
    
    // The system state that we are transitioning or are at.
    state_manager_communications::robotModeMsg currentState_;
    
    //The message containing the hunger level
    dining_philosopher_communications::hungerMsg hungerLevelMsg_;
    
    // The ROS Node Handle
    ros::NodeHandle nh_;
    
    //The ROS publisher
    ros::Publisher pub_;
    
    //The ROS timer
    ros::Timer timer_;
    
    // The timestamp of the last update of the philosopher hunger.
    ros::Time last_hunger_update_;
    
    // the slope of the linear function increasing the hunger
    double hunger_increase_rate_;
    double hunger_decrease_ratio_;
    
    // The Philisophers internal & external states.
    int philosopherState_;
    int philosopherIState_;
    
    // DISALLOW_COPY_AND_ASSIGN
    Philosopher(const Philosopher &);
    void operator=(const Philosopher&);
};

Philosopher::Philosopher(int id, std::string fork_counter, int64_t num_forks) 
    : spinner_(2), id_(id), transitioning_(false), num_forks_(num_forks),
    philosopherState_(STATE_NOTHING) {
  
  spinner_.start();
  
  srand(id_ * ros::Time::now().toNSec());
  nh_.param<int>("/philosophers/max_eating_time", max_eating_time_ ,3);
  nh_.param<int>("/philosophers/max_thinking_time", max_thinking_time_ ,3);
  ROS_INFO("Max thinking time %d Max eating time %d", max_eating_time_, max_thinking_time_);
  if (!nh_.getParam("/philosophers/starvationThreshold",STARVATION_LEVEL))
	exit(-1); 
  
  std::string topicName = "/hungerLevel/" + boost::lexical_cast<std::string>(id);
  pub_ = nh_.advertise<dining_philosopher_communications::hungerMsg>(topicName, 1);

  nh_.param<double>("/philosophers/hunger_increase_rate", hunger_increase_rate_ ,1);
  nh_.param<double>("/philosophers/hunger_decrease_ratio", hunger_decrease_ratio_ ,.8);
  
  timer_ = nh_.createTimer(ros::Duration(0.5), &Philosopher::postMsg, this);
 
  std::string remoteCounterName = "/counter/"+fork_counter;
  int retries = 0;
  while (!ros::service::waitForService(remoteCounterName, ros::Duration(.1)) && ros::ok()) {
		retries++;
		if (retries > 10) 
			ROS_ERROR("Could not find %s",remoteCounterName.c_str());
		ros::spinOnce();
	}
	
	client_ = nh_.serviceClient<remote_counter::countingSrv>(remoteCounterName, true);
  
  std::tr1::ranlux64_base_01 engine;
  engine.seed(id_ * ros::Time::now().toNSec());
  std::tr1::normal_distribution<double> normal(2.0, 1.0);
  
  hunger_level_ = normal(engine); 
  faulty_ = 0;                                   //////////////////////////////////////////////////////////////////
  
  if (hunger_level_ < 0) {
	  hunger_level_ = 0;
  }
  
  ROS_INFO("Hunger level initialized at %f", hunger_level_);
  last_hunger_update_ = ros::Time::now();
 
 ROS_INFO("Philosopher Initialized");
}

void Philosopher::start() {
  ROS_INFO("Philosopher Started...");  
  while (ros::ok()) {
    if (transitioning_) {
      transitioning_ = false;
      transitionComplete(currentState_);
    }
    if (philosopherState_ == STATE_NOTHING) {
      ros::Duration d(.1); 
      philosopherIState_ = ISTATE_NOTHING;
      d.sleep(); // Sleep a bit and wait if our status changed.
    } else {
      stateActive();
      recalculateHunger();                         
      philosopherIState_ = ISTATE_WAITING;
    }
  }
}

void Philosopher::stateActive() {
  recalculateHunger();                             
  philosopherIState_ = ISTATE_THINKING;
  think();
  if (transitioning_) return;  
  philosopherIState_ = ISTATE_WAITING;
  eat();
}

void Philosopher::think() {
  ROS_INFO("Philosopher %d Thinking...", id_);
  ros::Duration d((rand() % (max_thinking_time_ * 100) / 100.));
  d.sleep();
}

void Philosopher::eat() {
  ROS_INFO("Philosopher %d wants to eat", id_);
  bool have_forks = false;
  while (!have_forks && !transitioning_ && ros::ok()) {
      have_forks = getForks();
  };
  if (!transitioning_ && ros::ok()){;
    nowEating();
    recalculateHunger();                                        
    philosopherIState_ = ISTATE_EATING;
    ros::Duration d((rand() % (max_eating_time_ *100)) / 100.);
    d.sleep();
    recalculateHunger();                                         
    philosopherIState_ = ISTATE_WAITING;
    nowEating();
  }
  if (have_forks) giveForks();
}

void Philosopher::completeTransition() {
  // Nothing here!
}

void Philosopher::startTransition(const state_manager_communications::robotModeMsg &newState) {
  currentState_ = newState; 
  if (newState.mode == state_manager_communications::robotModeMsg::MODE_OFF) {
    philosopherState_ = STATE_NOTHING;
  } else {
    philosopherState_ = STATE_ACTIVE;
  }
  transitioning_ = true;
}

bool Philosopher::getForks() {
  return forkCounter(-num_forks_);
}

void Philosopher::giveForks() {
  while (!forkCounter(num_forks_) && ros::ok());
}

bool Philosopher::forkCounter(int64_t count) {
  remote_counter::countingSrv srv;
  
  srv.request.count = count;
  
  if (client_.call(srv)) {
    if (srv.response.ok) {
      return true;
    } else {
      ros::Duration d(.05);
      d.sleep();
      return false;
    }
	} else {
		ROS_ERROR("Failed to call counter");
		return false;
	}
}
	
void Philosopher::postMsg(const ros::TimerEvent& event) {
  recalculateHunger();                            
  //hungerLevelMsg_.philosopherId = id_;
  hungerLevelMsg_.hungerLevel = hunger_level_;
  hungerLevelMsg_.faulty = faulty_;                          /////////////////////////////////////////////////////
  pub_.publish(hungerLevelMsg_);
}

void Philosopher::recalculateHunger() {                 
  
  
  if ( (current_time - start_time_) > NORMAL_DURATION ) {   /////////////////////////////////////////////////////
		faulty_ = 1;
		//DO  JOBSSSSSSSSSSSSSS                                    
		
	}
  
  
  ros::Duration length = ros::Time::now() - last_hunger_update_;
  double secs = length.toSec();
  
  if (philosopherIState_ == ISTATE_EATING) {
    hunger_level_ *= pow(hunger_decrease_ratio_, secs);
  } else {
    hunger_level_ += hunger_increase_rate_ * secs;
  }
  
  if (hunger_level_ < 0 || hunger_level_ != hunger_level_) hunger_level_ = 0; //less that 0 or NaN
  last_hunger_update_ = ros::Time::now();
  
  
}

int main(int argc, char** argv) {
	std::string name = "";           //DO JOOOOOOOOOBSSSSSSSSSSSSSSSSSSSSSSSSSS
	  
	ros::init(argc,argv,name);	
	atoi(argv[4]);                  //DO JOOOOOOOOOOOBBSSSSSSSSSSSSSSSSSSSSSSS       
	NORMAL_DURATION =  atoi(argv[xxxxxxxxx]);			// DO JOOOBSSSSSSSSSSSSSSSSSSSSSSS
	Philosopher phil( atoi(argv[1]),
                    std::string(argv[2]),
                    atoi(argv[3]));
	phil.start();
}


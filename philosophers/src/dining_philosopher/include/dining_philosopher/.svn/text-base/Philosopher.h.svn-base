/*
 *	Copyright (C) 2012 Aristotle Univeristy of Thessaloniki, Greece
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in
 *	all copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *	THE SOFTWARE.
 */
#ifndef PHILOSOPHER_H
#define PHILOSOPHER_H
#include "ros/ros.h"
#include "remote_mutex/RemoteMutex.h"
#include "state_manager/StateClient.h"
#include "watchdog_timer/Watchdog.h"

#include "state_manager_communications/robotModeMsg.h"
#include <dining_philosopher_communications/hungerMsg.h>


/**
 * A single dinning philosopher. Each Philosopher has a unique id
 * as well as the two spoons that she handles.
 */
class Philosopher : StateClient {
  public:
    /**
     * Constructor
     * @param id the id of the Philosopher.
     * @param fork_counter the id of the fork repository
     */
    Philosopher(int id, std::string fork_counter, int64_t num_forks);
  
    /**
     * Start the Philosopher!
     */
    virtual void start();
  protected:
    /**
     * We are updated that the transition has been complete.
     */
    void completeTransition();
    
    virtual void nowEating(){};
    
    /**
     * Get notified to start the transition. StateClient.
     */
    void startTransition(const state_manager_communications::robotModeMsg &newState);
    
    /**
     * External Philosopher States.
     */
    static const int STATE_NOTHING = 0;
    static const int STATE_ACTIVE = 1;
    
    /**
     * Internal Philosopher States.
     * Waiting implies for a spoon.
     */
    static const int ISTATE_NOTHING = 0;
    static const int ISTATE_EATING = 1;
    static const int ISTATE_WAITING = 2;
    static const int ISTATE_THINKING = 3;
    
    double STARVATION_LEVEL;
    
    /**
     * Tries to get the forks (the philosopher wants).
     * Returns false when it fails.
     */
    bool getForks();
    
    void giveForks();
    
    /**
     * The method to periodically post the hungerMsg which contains 
     * the hungerLevel of each philosopher
     */
    void postMsg(const ros::TimerEvent& event);
    
    // The hunger level of each philosopher
    float hunger_level_;
    
    // An async spinner to help with sending/receiving calls.
    ros::AsyncSpinner spinner_;
    
    // Perform operations as in state active (think, eat)
    virtual void stateActive();
    
    virtual void recalculateHunger();
  protected:    
    /**
	 * The Client to the mutex serivce.
	 */
    ros::ServiceClient client_;
     
    // Incremnt the counter by the given value. 
    // Returns false if operation fails. (i.e. not that many forks
    // are available).
    bool forkCounter(int64_t count);
    
    // Think & Eat. Operations performed in active state.
    virtual void think();
    virtual void eat();
    
    // The Philosopher's id
    int id_; 
    
    // The number of forks needed.
    const int64_t num_forks_;
    
    // True if the system should be transitioning.
    // Useful for notifing processes
    bool transitioning_;
    
    /**
     * The maximum eating & thinking time, set by ROS parameters.
     * When a philisopher wants to eat, she picks a random number
     * of seconds betwee 0 and max and thinks/eats for that time.
     */
    int max_eating_time_;
    int max_thinking_time_;
    
    // The system state that we are transitioning or are at.
    state_manager_communications::robotModeMsg currentState_;
    
    //The message containing the hunger level
    dining_philosopher_communications::hungerMsg hungerLevelMsg_;
    
    // The ROS Node Handle
    ros::NodeHandle nh_;
    
    //The ROS publisher
    ros::Publisher pub_;
    
    //The ROS timer
    ros::Timer timer_;
    
    // The timestamp of the last update of the philosopher hunger.
    ros::Time last_hunger_update_;
    
    // the slope of the linear function increasing the hunger
    double hunger_increase_rate_;
    double hunger_decrease_ratio_;
    
    // The Philisophers internal & external states.
    int philosopherState_;
    int philosopherIState_;
    
    // DISALLOW_COPY_AND_ASSIGN
    Philosopher(const Philosopher &);
    void operator=(const Philosopher&);
};

#endif // PHILOSOPHER_H

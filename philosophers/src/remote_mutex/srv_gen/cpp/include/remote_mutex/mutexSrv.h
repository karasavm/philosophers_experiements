/* Auto-generated by genmsg_cpp for file /home/nasia/Desktop/philosophers/remote_mutex/srv/mutexSrv.srv */
#ifndef REMOTE_MUTEX_SERVICE_MUTEXSRV_H
#define REMOTE_MUTEX_SERVICE_MUTEXSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace remote_mutex
{
template <class ContainerAllocator>
struct mutexSrvRequest_ {
  typedef mutexSrvRequest_<ContainerAllocator> Type;

  mutexSrvRequest_()
  : requestor()
  , requestType(0)
  {
  }

  mutexSrvRequest_(const ContainerAllocator& _alloc)
  : requestor(_alloc)
  , requestType(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requestor_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  requestor;

  typedef uint8_t _requestType_type;
  uint8_t requestType;

  enum { TYPE_LOCK = 1 };
  enum { TYPE_UNLOCK = 2 };
  enum { TYPE_POLL = 3 };

  typedef boost::shared_ptr< ::remote_mutex::mutexSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote_mutex::mutexSrvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mutexSrvRequest
typedef  ::remote_mutex::mutexSrvRequest_<std::allocator<void> > mutexSrvRequest;

typedef boost::shared_ptr< ::remote_mutex::mutexSrvRequest> mutexSrvRequestPtr;
typedef boost::shared_ptr< ::remote_mutex::mutexSrvRequest const> mutexSrvRequestConstPtr;


template <class ContainerAllocator>
struct mutexSrvResponse_ {
  typedef mutexSrvResponse_<ContainerAllocator> Type;

  mutexSrvResponse_()
  : status(0)
  {
  }

  mutexSrvResponse_(const ContainerAllocator& _alloc)
  : status(0)
  {
  }

  typedef uint8_t _status_type;
  uint8_t status;

  enum { STATUS_LOCKED = 1 };
  enum { STATUS_UNLOCKED = 0 };

  typedef boost::shared_ptr< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote_mutex::mutexSrvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mutexSrvResponse
typedef  ::remote_mutex::mutexSrvResponse_<std::allocator<void> > mutexSrvResponse;

typedef boost::shared_ptr< ::remote_mutex::mutexSrvResponse> mutexSrvResponsePtr;
typedef boost::shared_ptr< ::remote_mutex::mutexSrvResponse const> mutexSrvResponseConstPtr;

struct mutexSrv
{

typedef mutexSrvRequest Request;
typedef mutexSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct mutexSrv
} // namespace remote_mutex

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::remote_mutex::mutexSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::remote_mutex::mutexSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::remote_mutex::mutexSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92c5b59df7e6f9662ed83c871edc5264";
  }

  static const char* value(const  ::remote_mutex::mutexSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92c5b59df7e6f966ULL;
  static const uint64_t static_value2 = 0x2ed83c871edc5264ULL;
};

template<class ContainerAllocator>
struct DataType< ::remote_mutex::mutexSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "remote_mutex/mutexSrvRequest";
  }

  static const char* value(const  ::remote_mutex::mutexSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::remote_mutex::mutexSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string requestor\n\
uint8 requestType\n\
uint8 TYPE_LOCK = 1\n\
uint8 TYPE_UNLOCK = 2\n\
uint8 TYPE_POLL = 3\n\
\n\
";
  }

  static const char* value(const  ::remote_mutex::mutexSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::remote_mutex::mutexSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d5878401ab4f108105f53837a17fdb3";
  }

  static const char* value(const  ::remote_mutex::mutexSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d5878401ab4f108ULL;
  static const uint64_t static_value2 = 0x105f53837a17fdb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "remote_mutex/mutexSrvResponse";
  }

  static const char* value(const  ::remote_mutex::mutexSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 status\n\
uint8 STATUS_LOCKED = 1\n\
uint8 STATUS_UNLOCKED = 0\n\
\n\
\n\
";
  }

  static const char* value(const  ::remote_mutex::mutexSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::remote_mutex::mutexSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.requestor);
    stream.next(m.requestType);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mutexSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::remote_mutex::mutexSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mutexSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<remote_mutex::mutexSrv> {
  static const char* value() 
  {
    return "76380b12c62c62b1c75ef04892016d2b";
  }

  static const char* value(const remote_mutex::mutexSrv&) { return value(); } 
};

template<>
struct DataType<remote_mutex::mutexSrv> {
  static const char* value() 
  {
    return "remote_mutex/mutexSrv";
  }

  static const char* value(const remote_mutex::mutexSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<remote_mutex::mutexSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "76380b12c62c62b1c75ef04892016d2b";
  }

  static const char* value(const remote_mutex::mutexSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<remote_mutex::mutexSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "remote_mutex/mutexSrv";
  }

  static const char* value(const remote_mutex::mutexSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<remote_mutex::mutexSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "76380b12c62c62b1c75ef04892016d2b";
  }

  static const char* value(const remote_mutex::mutexSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<remote_mutex::mutexSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "remote_mutex/mutexSrv";
  }

  static const char* value(const remote_mutex::mutexSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // REMOTE_MUTEX_SERVICE_MUTEXSRV_H

